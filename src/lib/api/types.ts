/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/author": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAuthor"];
        put?: never;
        post: operations["createAuthor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/author/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllAuthor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/author/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countAuthor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/author/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAuthor"];
        put: operations["updateAuthor"];
        post?: never;
        delete: operations["deleteAuthor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/author/{id}/ebooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAuthorEbook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ebook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listEbook"];
        put?: never;
        post: operations["createEbook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ebook/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllEbook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ebook/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countEbook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ebook/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEbook"];
        put: operations["updateEbook"];
        post?: never;
        delete: operations["deleteEbook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/format": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listFormat"];
        put?: never;
        post: operations["createFormat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/format/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllFormat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/format/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countFormat"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/format/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getFormat"];
        put: operations["updateFormat"];
        post?: never;
        delete: operations["deleteFormat"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genre": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listGenre"];
        put?: never;
        post: operations["createGenre"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genre/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllGenre"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genre/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countGenre"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genre/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getGenre"];
        put: operations["updateGenre"];
        post?: never;
        delete: operations["deleteGenre"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/language": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listLanguage"];
        put?: never;
        post: operations["createLanguage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/language/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllLanguage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/language/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countLanguage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/language/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getLanguage"];
        put: operations["updateLanguage"];
        post?: never;
        delete: operations["deleteLanguage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listSeries"];
        put?: never;
        post: operations["createSeries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllSeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countSeries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSeries"];
        put: operations["updateSeries"];
        post?: never;
        delete: operations["deleteSeries"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/series/{id}/ebooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listSeriesEbook"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/source": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listSource"];
        put?: never;
        post: operations["createSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/source/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAllSource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/source/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["countSource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/source/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSource"];
        put: operations["updateSource"];
        post?: never;
        delete: operations["deleteSource"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["loginLocally"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/download/{path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload/direct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["uploadDirect"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/files/upload/form": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["uploadForm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Author: {
            /** Format: int64 */
            id: number;
            last_name: string;
            first_name?: string | null;
            description?: string | null;
            /** Format: int64 */
            version: number;
            created_by?: string | null;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
        };
        AuthorShort: {
            /** Format: int64 */
            id: number;
            last_name: string;
            first_name?: string | null;
        };
        AuthorSummary: {
            /** Format: int64 */
            id: number;
            name: string;
        };
        BookResult: {
            title: string;
            series: string;
            /** Format: int64 */
            series_id?: number | null;
            authors: components["schemas"]["AuthorSummary"][];
            /** Format: int64 */
            id: number;
        };
        CreateAuthor: {
            last_name: string;
            first_name?: string | null;
            description?: string | null;
            created_by?: string | null;
        };
        CreateEbook: {
            title: string;
            description?: string | null;
            /** Format: int64 */
            series_id?: number | null;
            /** Format: int32 */
            series_index?: number | null;
            /** Format: int64 */
            language_id: number;
            authors?: number[] | null;
            genres?: number[] | null;
            created_by?: string | null;
        };
        CreateFormat: {
            name: string;
            mime_type: string;
            extension: string;
        };
        CreateGenre: {
            name: string;
        };
        CreateLanguage: {
            name: string;
            code: string;
        };
        CreateSeries: {
            title: string;
            description?: string | null;
            created_by?: string | null;
        };
        CreateSource: {
            location: string;
            /** Format: int64 */
            ebook_id: number;
            /** Format: int64 */
            format_id: number;
            /** Format: int64 */
            size: number;
            hash: string;
            /** Format: float */
            quality?: number | null;
            created_by?: string | null;
        };
        Ebook: {
            /** Format: int64 */
            id: number;
            title: string;
            description?: string | null;
            cover?: string | null;
            base_dir: string;
            series?: null | components["schemas"]["SeriesShort"];
            /** Format: int32 */
            series_index?: number | null;
            language: components["schemas"]["LanguageShort"];
            authors?: components["schemas"]["AuthorShort"][] | null;
            genres?: components["schemas"]["GenreShort"][] | null;
            /** Format: int64 */
            version: number;
            created_by?: string | null;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
        };
        EbookShort: {
            /** Format: int64 */
            id: number;
            title: string;
            has_cover: boolean;
            series?: null | components["schemas"]["SeriesShort"];
            /** Format: int32 */
            series_index?: number | null;
            language: components["schemas"]["LanguageShort"];
            authors?: components["schemas"]["AuthorShort"][] | null;
        };
        Format: {
            /** Format: int64 */
            id: number;
            name: string;
            mime_type: string;
            extension: string;
            /** Format: int64 */
            version: number;
        };
        FormatShort: {
            /** Format: int64 */
            id: number;
            name: string;
            mime_type: string;
            extension: string;
        };
        Genre: {
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            version: number;
        };
        GenreShort: {
            /** Format: int64 */
            id: number;
            name: string;
        };
        Language: {
            /** Format: int64 */
            id: number;
            name: string;
            code: string;
            /** Format: int64 */
            version: number;
        };
        LanguageShort: {
            /** Format: int64 */
            id: number;
            name: string;
            code: string;
        };
        LoginCredentials: {
            email: string;
            password: string;
        };
        Page_AuthorShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                last_name: string;
                first_name?: string | null;
            }[];
        };
        Page_EbookShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                title: string;
                has_cover: boolean;
                series?: null | components["schemas"]["SeriesShort"];
                /** Format: int32 */
                series_index?: number | null;
                language: components["schemas"]["LanguageShort"];
                authors?: components["schemas"]["AuthorShort"][] | null;
            }[];
        };
        Page_FormatShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                name: string;
                mime_type: string;
                extension: string;
            }[];
        };
        Page_GenreShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                name: string;
            }[];
        };
        Page_LanguageShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                name: string;
                code: string;
            }[];
        };
        Page_SeriesShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                title: string;
            }[];
        };
        Page_SourceShort: {
            /** Format: int32 */
            page: number;
            /** Format: int32 */
            page_size: number;
            /** Format: int32 */
            total: number;
            rows: {
                /** Format: int64 */
                id: number;
                location: string;
                /** Format: int64 */
                ebook_id: number;
                /** Format: int64 */
                format_id: number;
                /** Format: int64 */
                size: number;
                hash: string;
                /** Format: float */
                quality?: number | null;
            }[];
        };
        SearchItem: {
            /** Format: float */
            score: number;
            doc: components["schemas"]["BookResult"];
        };
        Series: {
            /** Format: int64 */
            id: number;
            title: string;
            description?: string | null;
            /** Format: int64 */
            version: number;
            created_by?: string | null;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
        };
        SeriesShort: {
            /** Format: int64 */
            id: number;
            title: string;
        };
        Source: {
            /** Format: int64 */
            id: number;
            location: string;
            /** Format: int64 */
            ebook_id: number;
            /** Format: int64 */
            format_id: number;
            /** Format: int64 */
            size: number;
            hash: string;
            /** Format: float */
            quality?: number | null;
            /** Format: int64 */
            version: number;
            created_by?: string | null;
            /** Format: date-time */
            created: string;
            /** Format: date-time */
            modified: string;
        };
        SourceShort: {
            /** Format: int64 */
            id: number;
            location: string;
            /** Format: int64 */
            ebook_id: number;
            /** Format: int64 */
            format_id: number;
            /** Format: int64 */
            size: number;
            hash: string;
            /** Format: float */
            quality?: number | null;
        };
        UpdateAuthor: {
            /** Format: int64 */
            id: number;
            last_name: string;
            first_name?: string | null;
            description?: string | null;
            /** Format: int64 */
            version: number;
        };
        UpdateEbook: {
            /** Format: int64 */
            id: number;
            title: string;
            description?: string | null;
            cover?: string | null;
            /** Format: int64 */
            series_id?: number | null;
            /** Format: int32 */
            series_index?: number | null;
            /** Format: int64 */
            language_id: number;
            authors?: number[] | null;
            genres?: number[] | null;
            /** Format: int64 */
            version: number;
        };
        UpdateFormat: {
            /** Format: int64 */
            id: number;
            name: string;
            mime_type: string;
            extension: string;
            /** Format: int64 */
            version: number;
        };
        UpdateGenre: {
            /** Format: int64 */
            id: number;
            name: string;
            /** Format: int64 */
            version: number;
        };
        UpdateLanguage: {
            /** Format: int64 */
            id: number;
            name: string;
            code: string;
            /** Format: int64 */
            version: number;
        };
        UpdateSeries: {
            /** Format: int64 */
            id: number;
            title: string;
            description?: string | null;
            /** Format: int64 */
            version: number;
        };
        UpdateSource: {
            /** Format: int64 */
            id: number;
            location: string;
            /** Format: int64 */
            ebook_id: number;
            /** Format: int64 */
            format_id: number;
            /** Format: int64 */
            size: number;
            hash: string;
            /** Format: float */
            quality?: number | null;
            /** Format: int64 */
            version: number;
        };
        UploadForm: {
            /** Format: binary */
            file: string;
        };
        UploadInfo: {
            final_path: string;
            /** Format: int64 */
            size: number;
            /** @description SHA256 hash */
            hash: string;
            original_name?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listAuthor: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_AuthorShort"];
                };
            };
        };
    };
    createAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAuthor"];
            };
        };
        responses: {
            /** @description Created Author */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Author"];
                };
            };
        };
    };
    listAllAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthorShort"][];
                };
            };
        };
    };
    countAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Author"];
                };
            };
        };
    };
    updateAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAuthor"];
            };
        };
        responses: {
            /** @description Updated Author */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Author"];
                };
            };
        };
    };
    deleteAuthor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listAuthorEbook: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Author Ebooks paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_EbookShort"];
                };
            };
        };
    };
    listEbook: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_EbookShort"];
                };
            };
        };
    };
    createEbook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEbook"];
            };
        };
        responses: {
            /** @description Created Ebook */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ebook"];
                };
            };
        };
    };
    listAllEbook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EbookShort"][];
                };
            };
        };
    };
    countEbook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getEbook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ebook"];
                };
            };
        };
    };
    updateEbook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEbook"];
            };
        };
        responses: {
            /** @description Updated Ebook */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ebook"];
                };
            };
        };
    };
    deleteEbook: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listFormat: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_FormatShort"];
                };
            };
        };
    };
    createFormat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFormat"];
            };
        };
        responses: {
            /** @description Created Format */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Format"];
                };
            };
        };
    };
    listAllFormat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FormatShort"][];
                };
            };
        };
    };
    countFormat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getFormat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Format"];
                };
            };
        };
    };
    updateFormat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFormat"];
            };
        };
        responses: {
            /** @description Updated Format */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Format"];
                };
            };
        };
    };
    deleteFormat: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listGenre: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_GenreShort"];
                };
            };
        };
    };
    createGenre: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGenre"];
            };
        };
        responses: {
            /** @description Created Genre */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Genre"];
                };
            };
        };
    };
    listAllGenre: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenreShort"][];
                };
            };
        };
    };
    countGenre: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getGenre: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Genre"];
                };
            };
        };
    };
    updateGenre: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGenre"];
            };
        };
        responses: {
            /** @description Updated Genre */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Genre"];
                };
            };
        };
    };
    deleteGenre: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listLanguage: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_LanguageShort"];
                };
            };
        };
    };
    createLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLanguage"];
            };
        };
        responses: {
            /** @description Created Language */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    listAllLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguageShort"][];
                };
            };
        };
    };
    countLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    updateLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLanguage"];
            };
        };
        responses: {
            /** @description Updated Language */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Language"];
                };
            };
        };
    };
    deleteLanguage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listSeries: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_SeriesShort"];
                };
            };
        };
    };
    createSeries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSeries"];
            };
        };
        responses: {
            /** @description Created Series */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Series"];
                };
            };
        };
    };
    listAllSeries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SeriesShort"][];
                };
            };
        };
    };
    countSeries: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getSeries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Series"];
                };
            };
        };
    };
    updateSeries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSeries"];
            };
        };
        responses: {
            /** @description Updated Series */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Series"];
                };
            };
        };
    };
    deleteSeries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    listSeriesEbook: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of Series Ebooks paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_EbookShort"];
                };
            };
        };
    };
    listSource: {
        parameters: {
            query?: {
                page?: number;
                page_size?: number;
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List paginated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Page_SourceShort"];
                };
            };
        };
    };
    createSource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSource"];
            };
        };
        responses: {
            /** @description Created Source */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Source"];
                };
            };
        };
    };
    listAllSource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List all (unpaginated, sorted by id, max limit applies) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SourceShort"][];
                };
            };
        };
    };
    countSource: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": number;
                };
            };
        };
    };
    getSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get one */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Source"];
                };
            };
        };
    };
    updateSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSource"];
            };
        };
        responses: {
            /** @description Updated Source */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Source"];
                };
            };
        };
    };
    deleteSource: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    loginLocally: {
        parameters: {
            query?: {
                redirect?: string;
                token?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User credentials */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginCredentials"];
                "application/x-www-form-urlencoded": components["schemas"]["LoginCredentials"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": unknown;
                };
            };
            /** @description Success andRedirect */
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    download: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Path to file */
                path: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: never;
    };
    uploadDirect: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description File data of supported mime types */
        requestBody: {
            content: {
                "*/*": number[];
                /** @example This is just test sample for swagger */
                "text/plain": string;
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadInfo"];
                };
            };
        };
    };
    uploadForm: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadForm"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadInfo"];
                };
            };
        };
    };
    search: {
        parameters: {
            query: {
                query: string;
                num_results?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchItem"][];
                };
            };
        };
    };
}
